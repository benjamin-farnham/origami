{"version":3,"sources":["_check-js.js","data-toggle.js","forms.js","parallax.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"origami.js","sourcesContent":[";(function() {\n    var html = document.querySelector('html');\n    html.removeAttribute(\"class\");\n})();\n",";(function() {\n    document.addEventListener('click', function(e) {\n    if (e.target.dataset.toggle === 'true'){\n        e.preventDefault();\n        e.stopPropagation();\n    \tvar el = e.target.dataset.toggleClass;\n        var elClass = document.querySelectorAll(\"[data-toggle-class]\");\n        for(var i = 0; i < elClass.length; i++) {\n            if(elClass[i].dataset.toggleClass == el){\n            \telClass[i].classList.toggle(el);\n            }\n       \t}\n    }\n});\n})();\n","// Form element constructor\n// ============================================================ //\n;(function(window, document, undefined){\n    var formElements = {\n        get: function() {\n            return _self;\n        },\n        init: function(options) {\n            return _self || new FormElements(options);\n        }\n    }\n\n    function FormElements(options) {\n        options = options || {};\n\n        // Selectors\n        this.labeledElements = document.querySelectorAll('input[type=text], input[type=email], input[type=password], input[type=url], input[type=number], input[type=date], input[type=datetime], input[type=datetime-local], input[type=number], input[type=time], input[type=tel], textarea, select');\n        this.selectElements = document.querySelectorAll('select');\n        this.selectLabels = document.querySelectorAll('select-label');\n        this.textArea = document.querySelectorAll('textarea');\n        this.selectInput = document.querySelectorAll('select');\n        this.fileInput = document.querySelectorAll('input[type=file]');\n\n        // Append event listeners\n            // Check elements associated with labels\n        this.cycleAppendLabel(this.labeledElements, this.checkSiblingValue, 'keyup');\n        this.cycleAppendLabel(this.labeledElements, this.checkSiblingValue, 'input');\n        this.cycleAppendLabel(this.labeledElements, this.checkSiblingValue, 'change');\n            // Select element labels - add class 'select-label'\n        this.selectLabelClass(this.selectElements, options);\n            // Textarea resizing\n        this.cycleAppendTextarea(this.textArea, this.resize, 'change');\n        this.cycleAppendTextarea(this.textArea, this.resize, 'cut');\n        this.cycleAppendTextarea(this.textArea, this.resize, 'paste');\n        this.cycleAppendTextarea(this.textArea, this.resize, 'drop');\n        this.cycleAppendTextarea(this.textArea, this.resize, 'keyup');\n            // Check file input value\n        this.fileValues(this.fileInput);\n\n        // Check elements on load\n        this.checkFormElements(this.labeledElements);\n    }\n\n    // Utilities / Construction functions\n    // ============================================================ //\n    FormElements.prototype.cycleAppendLabel = function(collection, handler, event) {\n        for (var item = 0; item < collection.length; item ++) {\n            collection[item].addEventListener(event, handler.bind(this, collection[item]));\n        }\n    }\n\n    FormElements.prototype.cycleAppendTextarea = function(collection, handler, event) {\n        for (var item = 0; item < collection.length; item ++) {\n            collection[item].addEventListener(event, handler.bind(this, collection[item]));\n        }\n    }\n\n    // Checking form labels sibling status to append 'active'\n    // ============================================================ //\n    FormElements.prototype.checkSiblingValue = function(element) {\n        var elementForVal = element.id;\n        var labelQuery = document.querySelector('label[for=' + elementForVal + ']');\n        if((element.nodeName === 'SELECT' && element.firstElementChild.innerText !== '') || element.value !== '') {\n            labelQuery.classList.add('active');\n        } else {\n            labelQuery.classList.remove('active');\n        }\n    }\n\n    // Auto-resize textarea elements based upon amount written content\n    // ============================================================ //\n    FormElements.prototype.resize = function(element, elementEvent) {\n        window.setTimeout(function() {\n            element.style.overflow = 'hidden';\n            element.style.minHeight = '112px';\n            element.style.height = 'auto';\n            element.style.height = element.scrollHeight + 'px';\n        }, 0);\n    }\n\n    // Make select labels function\n    // ============================================================ //\n    FormElements.prototype.selectLabelClass = function(selectList, options) {\n        for (var select = 0; select < selectList.length; select++) {\n            var selectID = selectList[select].id;\n            var selectLabel = document.querySelector('label[for=' + selectID + ']');\n            selectLabel.classList.add('select-label');\n        }\n    }\n\n    // Grab file upload value for aesthetics.\n    // ============================================================ //\n    FormElements.prototype.fileValues = function(fileList) {\n        for (var fileInput = 0; fileInput < fileList.length; fileInput++) {\n            fileList[fileInput].addEventListener('change', function() {\n                if (this.files.length > 0) {\n                    var fileVal = this.parentNode.querySelector('.file-value');\n                    var fileValue = '';\n                    for (var i = 0; i < this.files.length; i++) {\n                        if (i + 1 != this.files.length) {\n                            fileValue += this.files[i].name + ' , '\n                        } else {\n                            fileValue += this.files[i].name\n                        }\n                    }\n                    fileVal.innerText = fileValue;\n                }\n            });\n        }\n    }\n\n    // Mass initialization load (check for fields already filled out etc.)\n    // ============================================================ //\n    FormElements.prototype.checkFormElements = function(elementList) {\n        for (var element = 0; element < elementList.length; element++) {\n            if ((elementList[element].nodeName === 'SELECT' && elementList[element].firstElementChild.innerText !== '') || elementList[element].value !== '') {\n                elementList[element].nextElementSibling.classList.add('active');\n            }\n        }\n    }\n\n    var _self;\n\n    if (typeof define === 'function' && define.amd) {\n        define([], function() {\n            return formElements;\n        });\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = formElements;\n    } else {\n        window.formElements = formElements;\n    }\n\n})(window, document);\n\nvar createForm = formElements.init();\n","// ;((window, document, undefined) => {\n//\n//     const parallax = {\n//         get: function() {\n//             return _self;\n//         },\n//         init: function(element, options) {\n//             return _self || new Parallax(element, options);\n//         },\n//     };\n//\n//     class Parallax {\n//\n//         constructor(element = '[data-parallax=parallax]', options = {\n//             speed: .4,\n//             xPos: 'center',\n//             yPos: 'center'\n//         }) {\n//\n//         }\n//\n//\n//\n//     }\n//\n//     let _self;\n//\n//     if (typeof define === 'function' && define.amd) {\n//         define([], () => {\n//             return parallax;\n//         });\n//     } else if (typeof module !== 'undefined' && module.exports) {\n//         module.exports = parallax;\n//     } else {\n//         window.parallax = parallax;\n//     }\n//\n// })(window, document);\n//\n// const createParallax = parallax.init();\n"]}