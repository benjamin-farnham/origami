{"version":3,"sources":["_check-js.js","data-toggle.js","forms.js","parallax.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"origami.js","sourcesContent":["\"use strict\";\n\n;(function () {\n    var html = document.querySelector('html');\n    html.removeAttribute(\"class\");\n})();","'use strict';\n\n;(function () {\n    document.addEventListener('click', function (e) {\n        if (e.target.dataset.toggle === 'true') {\n            e.preventDefault();\n            var el = e.target.dataset.toggleClass;\n            var elClass = document.querySelectorAll(\"[data-toggle-class]\");\n            for (var i = 0; i < elClass.length; i++) {\n                if (elClass[i].dataset.toggleClass == el) {\n                    elClass[i].classList.toggle(el);\n                }\n            }\n        }\n    });\n})();","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Form element constructor\n// ============================================================ //\n\n;(function (window, document, undefined) {\n\n    var formElements = {\n        get: function get() {\n            return _self;\n        },\n        init: function init(options) {\n            var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\n            if (isIE11) {\n                document.querySelector('html').classList.add('ie11');\n                return;\n            }\n            return _self || new FormElements(options);\n        }\n    };\n\n    var FormElements = function () {\n        function FormElements(options) {\n            _classCallCheck(this, FormElements);\n\n            options = options || {};\n            this.labeledElements = document.querySelectorAll('input[type=text], input[type=email], input[type=password], input[type=url], input[type=number], input[type=date], input[type=datetime], input[type=datetime-local], input[type=number], input[type=time], input[type=tel], textarea, select');\n            this.selectElements = document.querySelectorAll('select');\n            this.selectLabels = document.querySelectorAll('select-label');\n            this.textArea = document.querySelectorAll('textarea');\n            this.selectInput = document.querySelectorAll('select');\n\n            // Append event listeners\n            // Check elements associated with labels\n            this.cycleAppendLabel(this.labeledElements, this.checkSiblingValue, 'keyup');\n            this.cycleAppendLabel(this.labeledElements, this.checkSiblingValue, 'oninput');\n            this.cycleAppendLabel(this.labeledElements, this.checkSiblingValue, 'onchange');\n            // Select element labels - add class 'select-label'\n            this.selectLabelClass(this.selectElements, options);\n            // Textarea resizing\n            this.cycleAppendTextarea(this.textArea, this.resize, 'onchange');\n            this.cycleAppendTextarea(this.textArea, this.resize, 'oninput');\n            this.cycleAppendTextarea(this.textArea, this.resize, 'cut');\n            this.cycleAppendTextarea(this.textArea, this.resize, 'paste');\n            this.cycleAppendTextarea(this.textArea, this.resize, 'drop');\n            this.cycleAppendTextarea(this.textArea, this.resize, 'keyup');\n\n            // Check elements on load\n            this.checkFormElements(this.labeledElements);\n        }\n\n        // Utilities / Construction functions\n        // ============================================================ //\n\n\n        _createClass(FormElements, [{\n            key: 'cycleAppendLabel',\n            value: function cycleAppendLabel(collection, handler, event) {\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = collection[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var item = _step.value;\n\n                        item.addEventListener(event, handler.bind(this, item));\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        }, {\n            key: 'cycleAppendTextarea',\n            value: function cycleAppendTextarea(collection, handler, event) {\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = collection[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var item = _step2.value;\n\n                        item.addEventListener(event, handler.bind(this, item));\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n            }\n\n            // Checking form labels sibling status to append 'active'\n            // ============================================================ //\n\n        }, {\n            key: 'checkSiblingValue',\n            value: function checkSiblingValue(element) {\n                var elementForVal = element.id;\n                var labelQuery = document.querySelector('label[for=' + elementForVal + ']');\n                if (element.nodeName === 'SELECT' && element.firstElementChild.innerText !== '' || element.value !== '') {\n                    labelQuery.classList.add('active');\n                } else {\n                    labelQuery.classList.remove('active');\n                }\n            }\n\n            // Auto-resize textarea elements based upon amount written content\n            // ============================================================ //\n\n        }, {\n            key: 'resize',\n            value: function resize(element, elementEvent) {\n                window.setTimeout(function () {\n                    element.style.overflow = 'hidden';\n                    element.style.minHeight = '112px';\n                    element.style.height = 'auto';\n                    element.style.height = element.scrollHeight + 'px';\n                }, 0);\n            }\n\n            // Make select labels function\n            // ============================================================ //\n\n        }, {\n            key: 'selectLabelClass',\n            value: function selectLabelClass(selectList, options) {\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = selectList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var select = _step3.value;\n\n                        var selectID = select.id;\n                        var selectLabel = document.querySelector('label[for=' + selectID + ']');\n                        selectLabel.classList.add('select-label');\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n            }\n\n            // Grab file upload value for aesthetics.\n            // ============================================================ //\n\n\n            // Mass initialization load (check for fields already filled out etc.)\n            // ============================================================ //\n\n        }, {\n            key: 'checkFormElements',\n            value: function checkFormElements(elementList) {\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                    for (var _iterator4 = elementList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                        var element = _step4.value;\n\n                        if (element.nodeName === 'SELECT' && element.firstElementChild.innerText !== '' || element.value !== '') {\n                            element.nextElementSibling.classList.add('active');\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError4 = true;\n                    _iteratorError4 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                            _iterator4.return();\n                        }\n                    } finally {\n                        if (_didIteratorError4) {\n                            throw _iteratorError4;\n                        }\n                    }\n                }\n            }\n        }]);\n\n        return FormElements;\n    }();\n\n    var _self = void 0;\n\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return formElements;\n        });\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = formElements;\n    } else {\n        window.formElements = formElements;\n    }\n})(window, document);\n\nvar createForm = formElements.init();","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n;(function (window, document, undefined) {\n\n    var parallax = {\n        get: function get() {\n            return _self;\n        },\n        init: function init(element, options) {\n            return _self || new Parallax(element, options);\n        }\n    };\n\n    var Parallax = function Parallax() {\n        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-parallax=parallax]';\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            speed: .4,\n            xPos: 'center',\n            yPos: 'center'\n        };\n\n        _classCallCheck(this, Parallax);\n    };\n\n    var _self = void 0;\n\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return parallax;\n        });\n    } else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = parallax;\n    } else {\n        window.parallax = parallax;\n    }\n})(window, document);\n\nvar createParallax = parallax.init();"]}